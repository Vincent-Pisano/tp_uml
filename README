Ce fichier va contenir ma conception (réflexion)

PHASE 1 : 
    1. Convertir les Boîtes (Objets) en fichier Typescript
    2. Différencier les Boîtes 
        ==> si il y a un nom en Italique ou une flèche pointillé 
            ==> Interface sinon, c'est une classe

Total : 11 classes (11 fichiers Typescripts): Voici ==>

    public class Droit {}
    public class Client {}
    public class Individu {}
    public class Entreprise {}
    public class CodeBarre {}
    public class Details {}
    public class Contact {}
    public class Option {}
    public class Produit {}

PHASE 2 : Vérifier les stéréotypes << >>

    public enum ClientType {}
    public enum DroitType {}

PHASE 3 : Traduire les relations

    Composition 
        ==> relation 1 -- 1 + instanciation obligatoire dans le constructeur
        ==> Compos

    Agrégation 
        ==> relation 1 -- 1 + instanciation non obligatoire dans le constructeur
        ==> Agréga

    Héritage
        ==> relation d'héritage du parent (à gauche) à l'enfant (à droite)
        ==> Hérita

    CodeBarre   1 -- 1      Client  
    Client      1 -- n      Droit
    Client      Hérita      Individu
    Client      Hérita      Entreprise
    Droit       n -- n      Produit
    CodeBarre   1 -- n      Produit
    CodeBarre   1 -- n      Option
    Details     Compos      Individu
    Details     Compos      Entreprise
    Contact     Compos      Entreprise
    Produit     Compos      Produit
    Option      Agréga      Produit

PHASE 4 : Implémenter

    Remarque 1 : relation Many to Many présente entre Droit et Produit
        ==> création de la classe ProduitDroit
        ==> nouvelles relations : 
                Droit    1 -- n     ProduitDroit
                Droit    1 -- n     ProduitDroit

    Remarque 2 : Présence d'un Singleton dans la classe Produit
        ==> on laisse l'instanciation de l'attribut Produit 
            dans l'objet Produit en undefined
        ==> Eviter de créer une boucle infinie et de faire planter
            le programme

    Remarque 3 : pas de ClientType pour la classe Parent (Client)
        ==> on ajoute un ClientType pour la classe Client = indefini

    Remarque 4 : Details et Contact n'ont pas de d'identifiant unique 
        ==> possibilité de doublons 
            --> ajout de idDetails (Details) et idContact (Contact)

    Remarque 5 : doublon de code des attributs de Contact et de certain 
                 attributs de Individu
        ==> Clean Up du code, on veut limiter le code en double/inutile
            --> Suppression des attributs prenom / nom / string et ajout 
                d'un attribut de type Contact dans Individu

PHASE 5 : Générer des données avec faker

    Création du fichier GenerateJsonFiles.ts pour générer fichirs JSON

    Création des 2 fonctions pour répondre aux 2 partie de l'objectif 2
        ==> 5 instances parmi l'objet client et ses enfants
            --> generateClientJsonFiles         :      dataClient.json  

        ==> 5 instances parmi la relation entre l'objet Droit et l'objet Produit
            --> generateProduitDroitJsonFiles   :      dataProduitDroit.json

    les remplir en utilisant les fonctions de générations de données
        ==> Générer les :
            Droit       :      generateDroit        ==> Array<Droit>
            Produit     :      generateProduit      ==> Array<Produit>
            Option      :      generateOption       ==> Option
            Contact     :      generateContact      ==> Contact
            Details     :      generateDetails      ==> Details
            Client      :      generateClient       ==> Client
            Individu    :      generateIndividu     ==> Individu
            Entreprise  :      generateEntreprise   ==> Entreprise
            Array de   )
            Droit d'un }:      generateDroitClients ==> Array<Droit>
            Client     )     
